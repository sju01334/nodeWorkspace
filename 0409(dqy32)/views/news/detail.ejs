<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<!-- 파비콘.. 윈도우 상 아이콘이다. -->
<link rel="shortcut icon" href="data:image/x-icon;," type="image/x-icon">

<style>
body {font-family: Arial, Helvetica, sans-serif;}
* {box-sizing: border-box;}

input[type=text], textarea {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  margin-top: 6px;
  margin-bottom: 16px;
  resize: vertical;
}
textarea{
  height: 200px;
}

input[type=button] {
  background-color: #4CAF50;
  color: white;
  padding: 12px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

input[type=button]:hover {
  background-color: #45a049;
}

.container {
  border-radius: 5px;
  background-color: #f2f2f2;
  padding: 20px;
}

.comment-list div{
  display: inline-block; 
  /* block 속성(크기가능)을 유지하되, 공존할 수 있음 */
  border: 1px solid #ccc;
}
</style>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdn.ckeditor.com/4.16.0/standard/ckeditor.js"></script>
<script src="/js/Comments.js"></script>
<script>
/*JQuery 의 문법 형시 (누구를).어떻게, 누구자리에 올수있는 요소?
CSS의 selector가 올수 있다.*/
$(function(){ //onLoad되면
  //편집기 입히기
  CKEDITOR.replace("content");

  $($("input[type='button']")[0]).click(function(){//등록버튼
    edit();
  });

  $($("input[type='button']")[1]).click(function(){//목록버튼
    getList();
  });




});

function edit(){
  $("form").attr("action", "/news/edit"); //url은 개발자가 정한다, 단 서버랑 짝을 맞추자
  $("form").attr("method", "post");
  $("form").submit(); //전송행위가 발생

}

function getList(){
  location.href="/news/list";
}

//댓글 등록 요청
function addComment(){
 /*
  $("#comment-form").attr({
    method:"post",
    action:"/comments/regist"
  });
  $("#comment-form").submit();
  */

  //화면의 일부만 변경하기 위해(부분변경)서, 백그라운드에서 요청을 시도해 본다
  var xhttp = new XMLHttpRequest();//비동기 객체 생성 

  //이벤트 처리 
  xhttp.onreadystatechange=function(){
    if(this.readyState==4 && this.status==200){
      //서버에서 성공된 응답데이터가 온 시점이다!!
      // alert("서버로부터 받은 결과는 "+this.responseText);

      //responseText를 분석하여, 성공, 실패, 여부에 따라 알맞는 메시지 출력
      var json = JSON.parse(this.responseText); //쌍따옴표 걷어내고, json 객체 반환
      // alert("분석결과는 "+ json.result);
      
      if(json.result==0){
        alert("댓글등록실패")
      }else{
        //성공한 경우 댓글 불러오기(서버로부터 요청 )
        alert("댓글등록 성공")
        // location.reload(); //페이지 새로고침
        // location.href="/coments/list?news_id=<%=news[0]%>"; //디자인이 아닌 json 형식으로 나옴
        //비동기로 요청하자!! 따라서 디자인을 제외한 데이터만 서버로 부터 가져오자
        getCommentsList();
      }
    }     
  }

  xhttp.open("POST", "/comments/regist", true);
  xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  var msg=$("input[name='msg']").val();//댓글 내용
  var author=$("input[name='author']").val();//댓글 작성자

  xhttp.send("news_id=<%=news[0]%>&msg="+msg+"&author="+author);

}

//댓글 목록을 비동기로 가져오기!!(처음에 게시판 들어올때도 호출+코멘트 등록시에도 호출)
function getCommentsList(){

  //서버는 더이상 디자인 코드를 보내주지 않는다. 따라서 비동기방식으로 데이터를 가져오자
  var xhttp=new XMLHttpRequest(); 
  //메인 실행부는 아래의 이벤트 함수를 통해, 비동기방식의 요청이 완료된 시점을 알수 있다
  xhttp.onreadystatechange=function(){
    //서버가 무사히 처리를 했고, 응답이 왔다면(두가지 조건만족)
    if(this.readyState==4 && this.status==200){
      // alert("서버로부터 받은 데이터는"+this.responseText);
      //서버가 json 문자열로 전송했기 때문에 , 다시 json 으로 복원을 하여 사용해보자
      var json=JSON.parse(this.responseText)// 문자열 to json
      // alert("코멘트 게시물 수는 "+ json.rows.length); //2차원 배열의 길이

      //서버로부터 받은 데이터를 화면에 갱신시켜보자, 이떄 개발자는 DOM 지식이 있어야
      //html 을 동적으로 변경시킨다
      printCommentsList(json.rows);
    }
  }
  xhttp.open("GET", "/comments/list?news_id=<%=news[0]%>", true);
  xhttp.send();
}

//댓글 출력
function printCommentsList(arr){
  //출력전에, 기존에 등록된 div안의 댓글을 싹 지우자, 그후 반복문을 돌리자
  console.log(arr);
  $("#comments_wrapper").html(""); //innerHTML="" 동일
  for(var i=0; i<arr.length; i++){
    var msg=arr[i][2];
    var author=arr[i][3];
    var writeDay=arr[i][4].substring(0,10);
    var c=new Comments(document.getElementById("comments_wrapper"), msg, author, writeDay);
  }
  
}


</script>
</head>
<body>

<h3>Contact Form</h3>

<div class="container">
    <!-- 폼 태그의 속성중 action은 이 폼양식을 전송할 대상 서버의 url을 명시할 수 있다. -->
    <!-- 
      id와 name 공통점과 차이점
      공통점)문서내의 요소를 식별하기 위함
      차이점)id-유일해야함, name-중복허용(배열로 인식)
                name은 폼 전송시 전송 파라미터 역할을 한다, 즉 변수 역할을 한다
                이때 전송 파라미터로서의 name의 이름은 주로 db의 테이블의 컬럼명과 일치시키는 규칙
     -->
  <form id="detail-form">
    <input type="text" name="title" value="<%=news[1]%>">
    <input type="text" name="writer" value="<%=news[2]%>">
    <textarea name="content"><%=news[3]%></textarea>

    <!-- input 태그의 type 중 submit은 디폴트로 전송기능이 포함되어 있기 때문에
    클릭만으로도, 전송이 발생함. 따라서 일반 버튼화 시켜놓자 -->
    <input type="button" value="등록">
    <input type="button" value="목록">
  </form>

  <form id="comment-form">
    <!-- 아래의 히든 용도는? 어떤 뉴스기사에 대한 댓글인지를 결정지음 -->
    <input type="hidden" name="news_id" value="<%=news[0]%>">
    <input type="text" name="msg" placeholder="댓글내용" style="width:60%">
    <input type="text" name="author" placeholder="작성자" style="width:10%">
    <input type="button" value="댓글등록" style="width:10%" onclick="addComment()">
  </form>

  <div id="comments_wrapper">
    <%for(var i=0;i<commentsList.length;i++){%>
    <%comments=commentsList[i] //댓글 한건 꺼내기%>
    <div class="comment-list">
      <div style="width:70%"><%=comments[2]%></div>    
      <div style="width:15%"><%=comments[3]%></div> 
      <%
        var d = new Date(comments[4]);      
        var yy=d.getFullYear();
        var mm=lib.getZeroString(d.getMonth()+1); //월
        var dd = lib.getZeroString(d.getDate());//일
      %>  
      <div style="width:10%"><%=yy%>-<%=mm%>-<%=dd%></div>    
    </div>
    <%}%>
  </div>

</div>

</body>
</html>
